# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthPayload {
  access_token: String!
  avatar: String
  id: Int!
  name: String!
}

type Comment {
  author: User!
  content: String!
  createdAt: DateTime!
  id: Int!
  post: Post!
  updatedAt: DateTime!
}

type Count {
  comments: Int!
  likes: Int!
}

input CreateCommentInput {
  content: String!

  """post id"""
  postId: Int!
}

input CreatePostInput {
  """post content"""
  content: String!
  published: Boolean!
  tags: [String!]!

  """post content"""
  thumbnail: String!

  """title of post (toto)"""
  title: String!
}

input CreateTagInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateUserInput {
  avatar: String
  bio: String
  email: String!
  name: String!
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createLike(postId: Int!): Boolean!
  createPost(createPostInput: CreatePostInput!): Boolean!
  createTag(createTagInput: CreateTagInput!): Tag!
  createUser(createUserInput: CreateUserInput!): User!
  removeComment(id: Int!): Comment!
  removeLike(postId: Int!): Boolean!
  removePost(id: Int!): Boolean!
  removeTag(id: Int!): Tag!
  removeUser(id: Int!): User!
  signIn(signInput: SignInInput!): AuthPayload!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  updatePost(updatePostInput: UpdatePostInput!): Post!
  updateTag(updateTagInput: UpdateTagInput!): Tag!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Post {
  _count: Count!
  author: User!
  comments: [Comment!]!
  content: String!
  createdAt: DateTime!
  id: Int!
  published: Boolean!
  slug: String
  tags: [Tag!]!
  thumbnail: String
  title: String!
  updatedAt: DateTime!
}

type Query {
  comment(id: Int!): Comment!
  comments(postId: Int, skip: Int = 0, take: Int = 12): [Comment!]!
  comments_count(postId: Int): Int!
  post(id: Int!): Post!
  postLikeCount(postId: Int!): Int!
  post_count: Int!
  posts(skip: Float, take: Float): [Post!]!
  tag(id: Int!): Tag!
  user(id: Int!): User!
  userLikedPost(postId: Int!): Boolean!
  user_posts(skip: Float, take: Float): [Post!]!
  user_posts_count: Int!
}

input SignInInput {
  email: String!
  password: String!
}

type Tag {
  id: Int!
  name: String!
  posts: [Post!]!
}

input UpdateCommentInput {
  content: String
  id: Int!

  """post id"""
  postId: Int
}

input UpdatePostInput {
  """post content"""
  content: String
  id: Int!
  published: Boolean
  tags: [String!]

  """post content"""
  thumbnail: String

  """title of post (toto)"""
  title: String
}

input UpdateTagInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateUserInput {
  avatar: String
  bio: String
  email: String
  id: Int!
  name: String
  password: String
}

type User {
  avatar: String
  bio: String
  comments: [Comment!]!
  email: String!
  id: Int!
  name: String!
  posts: [Post!]!
}