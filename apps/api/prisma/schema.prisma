// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  @@map("users")
  id Int @id @default(autoincrement())
  name String
  email String @unique
  bio String?
  avatar String?
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts Post[]
  comments Comment[]

  likes Like[]
}

model Post {
  @@map("posts")
  id Int @id @default(autoincrement())
  slug String? @unique
  title String
  content String
  thumbnail String?
  authorId Int
  author User @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments Comment[]
  tags Tag[] @relation("PostTags")

  likes Like[]
}

model Comment {
  @@map("comments")
  id Int @id @default(autoincrement())
  content String
  postId Int
  post Post @relation(fields: [postId], references: [id])
  authorId Int
  author User @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  @@map("tags")
  id Int @id @default(autoincrement())
  name String @unique
  posts Post[] @relation("PostTags")
}

model Like {
  @@map("likes")
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  postId Int
  post Post @relation(fields: [postId], references: [id])
}
